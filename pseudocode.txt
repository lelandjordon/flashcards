Pseudocode!

Lay out the page with a top card and start options.
Player: Choose level
Present full card
Click Next button to continue to next card
Reach the end of the stack
  Choose whether to start again or continue to the next level

Create a card object containing two card keys: Hangul and phonetic
Create an collection of cards containing matching Hangul and phonetic answers


Card as an object:
card1 = {
  hangul: "구",
  english: "goo"
};

ㅂㅈㄷㄱ쇼ㅕㅑㅐㅔㅣㅏㅓㅗㅎㄹㄹㄴㄴㅁㅋㅌㅊㅊ퓨ㅜㅜ 구 리

Create a card collection -- an array of card objects?

deck1 = []
function deckAdd(h, e){
  var card = {hangul: h, english: e}
  deck1.push(card);
}
deckAdd("다", "da");

clickCounter = 0;
var clickCard2 = document.querySelector(".cardBottom")
  clickCard2.addEventListener("click", function(){
    var elTop = document.querySelector(".cardTop")
    innerHTML = card[clickCounter].hangul;
    var elBottom = document.querySelector(".cardBottom")
    el.innerHTML = card[clickCounter].english;
  })

Card as a text element in html:
function displayCard

Click on a card to flip it:
function clickCard

card1.english

Randomizer:
var d = parseInt(Math.random() * 10);    <-- Gives a whole number between 0 and 9.

Mousein and mouseout for showing content??

*$*$* Selecting deck1, deck2, or deck3:  ********* $$$ Silver  \/ \/ \/

Use .this.?
Basic card-advance function:


clickCounter = 0;
var clickNext = document.querySelector(".nextButton")
  clickNext.addEventListener("click", function(){
    if (clickCounter >= deck1.length){
      clickCounter = 0;
    };
      var elTop = document.querySelector(".flashCard")
      elTop.innerHTML = deck1[clickCounter].hangul;
      var elBottom = document.querySelector(".cardBottom")
      elBottom.innerHTML = deck1[clickCounter].english;
      clickCounter++

  })
or use deckX in place of deck1 after assigning (in this case) deck1 to deckX?
function deckChoice = document.QuerySelector(".chooseDeck"){
something something something something
}


*************************************** $$$$$$$$$$ Silver /\ /\ /\ /\

Ability to loop through an array;
if-else (without looking them up)
accessing info out of an object (properties, values, etc) without looking it up
Revisit TTMAR
